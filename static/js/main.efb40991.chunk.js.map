{"version":3,"sources":["components/BackgroundColorChanger.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["BackgroundColorChanger","onInputChange1","onInputChange2","color1","color2","randomColor","className","type","value","name","onInput","href","id","onClick","Card","email","bg","pfp","src","randomNumber","min","max","Math","floor","random","randomBg","randomPfp","CardList","cardComponent","robots","map","user","i","style","padding","SearchBox","searchChange","placeholder","onChange","Scroll","props","overflowY","border","borderBottom","height","children","App","onSearchChange","event","setState","searchfield","target","colorChange1","colorChange2","randomBgcolorGen","color","state","fetch","then","response","json","users","this","document","body","background","filteredRobots","filter","robot","toLowerCase","includes","length","overflow","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.efb40991.chunk.js","sourcesContent":["import React from 'react'\r\nimport './BackgroundColorChanger.css'\r\n\r\nconst BackgroundColorChanger = ({onInputChange1,onInputChange2, color1, color2,randomColor }) => {\r\n    return (\r\n        <div>\r\n                <h4 className=\"dib bg-h4\">Change Colors</h4>\r\n                <input className=\"color1\" type=\"color\" value={color1} name=\"color1\" onInput={onInputChange1}/>\r\n                <input className=\"color1\" type=\"color\" value={color2} name=\"color2\" onInput={onInputChange2}/>\r\n                <a href=\"#\" id= \"random\" className=\"f6 link dim ph3 pv2 mb2 dib white bg-purple\" onClick={randomColor}>Random</a>\r\n        </div>\r\n    )\r\n}\r\nexport default BackgroundColorChanger;","import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id, bg, pfp}) =>{\r\n    \r\n\r\n    return(\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma4 grow bw2 w5-ns w-20-l shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200&bgset=bg${bg}&set=set${pfp}`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nfunction randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min) ) + min;\r\n  }\r\n  \r\nconst randomBg = randomNumber(1,2);\r\nconst randomPfp = randomNumber(1,5);\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n\r\n    const cardComponent = robots.map((user, i) =>{\r\n\r\n        return (<Card \r\n        key={\"key\"+i} \r\n        id={user.id} \r\n        name={user.name} \r\n        email={user.email}\r\n        bg = {randomBg}\r\n        pfp = {randomPfp}\r\n        />)\r\n    })\r\n    return(\r\n    <div className=\"flex flex-wrap flex-auto items-stretch justify-center\" style={{padding:'0 0 30px 0'}}>\r\n        {cardComponent}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2 search'> \r\n            <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder=\"Search Robots\" onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll', border:'2px solid black',borderBottom:'none', height:'75vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\nimport BackgroundColorChanger from '../components/BackgroundColorChanger';\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n            color1:'#071b52',\r\n            color2:'#008080',\r\n            \r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=> response.json())\r\n        .then(users=> this.setState({robots: users}))\r\n    }\r\n\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield: event.target.value})\r\n\r\n\r\n    }\r\n    colorChange1=(event)=>{\r\n        this.setState({color1 : event.target.value});\r\n    }\r\n    colorChange2=(event)=>{\r\n        this.setState({color2 : event.target.value});\r\n\r\n    }\r\n    randomBgcolorGen = () =>{\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n    }\r\n    randomBg= () =>{\r\n        this.setState({color1: this.randomBgcolorGen(), color2: this.randomBgcolorGen() });\r\n    }\r\n\r\n    render(){\r\n        const {color1, color2, robots, searchfield} = this.state;\r\n        document.body.style.background= `linear-gradient(to left, ${color1} , ${color2})`; \r\n        const filteredRobots = robots.filter(robot =>{\r\n        return (robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        );\r\n        \r\n    })\r\n    if(robots.length===0){\r\n        return (\r\n        <div className=\"vh-100 dt w-100 flex items-center justify-center\">\r\n        <h1 className=\"tc f2 v-mid\">Loading</h1>\r\n        </div>\r\n        )\r\n    }\r\n        return(\r\n            \r\n            <div className=\"tc\" style={{overflow:'hidden', height:'100vh'}}>\r\n                <h1 className=\"f2-l f2-m f4\">RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                \r\n                <BackgroundColorChanger onInputChange1={this.colorChange1} onInputChange2={this.colorChange2} color1={color1} color2={color2} randomColor={this.randomBg}/>\r\n                <Scroll>\r\n                <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n    \r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// import { robots } from './robot';\nReactDOM.render(\n  <React.StrictMode> \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}